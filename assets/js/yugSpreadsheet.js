/** * @summary     Spreadsheet of Yuggoth * @description This plugin tries to intelligently parse undeterministic spreadsheets * (such as badly organized Excel documents) into data that can be manipulated * by something deterministic, such as a relational database. * * @version     1.0.0 * @file        yugSpreadsheet.js * @author      Vic Bobkov * @contact     vik.bobkov@gmail.com * * @copyright Copyright 2013 Vic Bobkov, all rights reserved. * */ // TO DO: more extensive documentation (i.e. wtf is this doing and wtf are all these regexes everywhere?) $.fn.yugSpreadsheet = function(data) {	var self = this;	self.container_selector = '#' + $(this).prop('id');	if($(self.container_selector).length < 1 || typeof data === 'undefined') {		return;	}	self.findBestMatch = function(colname, list) {		var alias_regex;		var aliases;		var match_index = -1;		var sanitized;		for(var i = 0; i < list.length; i++) {			sanitized = $.trim(list[i].toLowerCase().replace(/[^0-9A-Za-z-_ ]/g, ''));			aliases = [];			if(typeof self.settings.aliases !== 'undefined') {				$.each(self.settings.aliases, function(replace, newvalue) {					alias_regex = new RegExp(replace, 'g');					aliases.push(sanitized.replace(alias_regex, newvalue));				});			}			$.each(self.settings.columns, function(idx, column) {				if(column['name'] == colname				&& typeof column['matches'] !== 'undefined'				&& (column['name'] == sanitized					|| aliases.indexOf(column['name']) != -1					|| column['matches'].indexOf(sanitized) != -1)) {					match_index = i;				}			});			if(match_index != -1) {				break;			}		}		return match_index;	};	self.openDoubleQuotes = function(str) {		open_quotes = content[i].match(/"/g);		if(open_quotes == null) {			open_quotes = 0;		}		else {			open_quotes = open_quotes.length % 2;		}		return open_quotes > 0;	}	self.settings = data;	self.delimiter = "\t";	content = $.escapeHtmlEntitiesXMLFriendly($(self.container_selector).val()).split("\n");	var best_matches = {};	var best_matches_count = 0;	var column_names = content[0].split(self.delimiter);	if(content.length < 1 || typeof column_names === 'undefined') {		return null;	}	var insert_columns = [];	var update_columns = [];	if(typeof self.settings.primaryKey !== 'undefined') {		update_columns.push(self.settings.primaryKey);	}	var current_colname;	for(var j = 0; j < self.settings.columns.length; j++) {		current_colname = self.settings.columns[j]['name'];		if(typeof self.settings.columns[j]['defaultValue'] === 'undefined') {			self.settings.columns[j]['defaultValue'] = null;		}		best_matches[current_colname] = self.findBestMatch(current_colname, column_names);		if(!self.settings.columns[j]['excludeFromInsert']) {			insert_columns.push(current_colname);		}		if(best_matches[current_colname] == -1 && !self.settings.columns[j]['required']) {			best_matches[current_colname] = -2;		}		else {			best_matches_count++;			if(!self.settings.columns[j]['excludeFromUpdate']) {				update_columns.push(current_colname);			}		}	}	// TO DO: make sure all values in best_matches are unique	var missing_data = '';	$.each(best_matches, function(colname, colindex) {		if(colindex == -1) {			missing_data += 'missing column: ' + colname + '\n';		}	});	if(missing_data != '') {		alert(missing_data);		return missing_data;	}	else {		var double_quote_count;		var row;		var parsed_content = [];		var parsed_line;		var previous_parsed_line;		var translation = [];		// intelligently parse line breaks and double quotes		// excel copy/paste surrounds line-broken cells with " and then turns " into "" inside line-broken cells		var line_break = false;		for(var i = 1; i < content.length; i++) {			if(content[i] == '') {				continue;			}			parsed_line = content[i].split(self.delimiter);			if(line_break) {				previous_parsed_line[previous_parsed_line.length - 1] += ' ' + parsed_line.shift();				parsed_line = previous_parsed_line.concat(parsed_line);			}			if(parsed_line.length < column_names.length) {				double_quote_count = parsed_line[parsed_line.length - 1].match(/"/g);				if(double_quote_count != null && double_quote_count.length % 2 == 0) {					alert('<0x5f3759df>: parse error on line ' + (i + 1));					parsed_content = [];					break;				}				previous_parsed_line = parsed_line;				line_break = true;				continue;			}			else {				line_break = false;			}			for(var j = 0; j < parsed_line.length; j++) {				parsed_line[j] = parsed_line[j].replace (/(^")|("$)/g, '').replace(/""/g, "''").replace(/"/g, "''");			}			if(parsed_line.length > 0) {				parsed_content.push(parsed_line);			}			content[i] = null;		}		content = null;		parsed_line = null;		if(typeof self.settings.returnType === 'undefined' || self.settings.returnType.toLowerCase() == 'object') { // object variant			for(var i = 0; i < parsed_content.length; i++) {				row = {};				for(var j = 0; j < self.settings.columns.length; j++) {					if([-1,-2].indexOf(best_matches[self.settings.columns[j]['name']]) == -1) {						if(typeof parsed_content[i][best_matches[self.settings.columns[j]['name']]] !== 'undefined') {							parsed_content[i][best_matches[self.settings.columns[j]['name']]] = parsed_content[i][best_matches[self.settings.columns[j]['name']]].replace(/\n|\r/g, " ").trim();						}						row[self.settings.columns[j]['name']] = parsed_content[i][best_matches[self.settings.columns[j]['name']]];					}					else {						row[self.settings.columns[j]['name']] = self.settings.columns[j]['defaultValue'];					}					if(typeof self.settings.columns[j].valueFilter == 'function') {						row[self.settings.columns[j]['name']] = self.settings.columns[j].valueFilter(row[self.settings.columns[j]['name']]);					}				}				translation.push(row);			}		}		else if (self.settings.returnType.toLowerCase() == 'array') { // array variant			for(var i = 0; i < parsed_content.length; i++) {				row = [];				for(var j = 0; j < self.settings.columns.length; j++) {					if([-1,-2].indexOf(best_matches[self.settings.columns[j]['name']]) == -1) {						if(typeof parsed_content[i][best_matches[self.settings.columns[j]['name']]] !== 'undefined') {							parsed_content[i][best_matches[self.settings.columns[j]['name']]] = parsed_content[i][best_matches[self.settings.columns[j]['name']]].replace(/\n|\r/g, " ").trim();						}						row.push(parsed_content[i][best_matches[self.settings.columns[j]['name']]]);					}					else {						row.push(self.settings.columns[j]['defaultValue']);					}					if(typeof self.settings.columns[j].valueFilter == 'function') {						row[row.length - 1] = self.settings.columns[j].valueFilter(row[row.length - 1]);					}				}				translation.push(row);			}		}	}	return { 'rows': translation, 'insert_columns': insert_columns, 'update_columns': update_columns };};